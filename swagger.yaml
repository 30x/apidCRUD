swagger: '2.0'
info:
  title: Building blocks of REPL and CRUD module
  description: |
    Assumes you have read [APID Core](https://docs.google.com/a/apigee.com/document/d/15-HvWdv-JGRk5rKDK5DLjr0qEqe8lwy18AQRQqRlO-I/edit?usp=sharing) document.
    
    Mapping:

    | Tag     | Description                                                       |
    | ------- | ----------------------------------------------------------------- |
    | schema  | Represents the schema operations, e.g. manipulate table structure |
    | table   | Represents the table operations, e.g. manipulate table data       |
    
  version: '0.3'
  contact:
    name: 'Apigee Inc.'
    email: support@apigee.com
    url: 'https://www.apigee.com/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: /apid
consumes:
  - application/json
  - application/xml	# notyet
  - application/x-www-form-urlencoded
produces:
  - application/json
  - application/xml	# notyet
paths:
  /db: # PATH
    get: # VERB
      summary: getDbResources() - Get resources for this service.
      operationId: getDbResources
      description: Return an array of the resources available.
      x-published:	# notyet
        - db.list
      parameters:
        - name: as_list
          type: boolean
          in: query
          description: Return only a list of the resource identifiers.
        - name: fields
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Comma-delimited list of properties to be returned for each resource,
            "*" returns all properties. If as_list, use this to override the
            default identifier.
        - name: id_field
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Comma-delimited list of the fields used as identifiers, used to
            override defaults or provide identifiers when none are provisioned.
        - name: id_type
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Comma-delimited list of the field types used as identifiers for the
            table, used to override defaults or provide identifiers when none
            are provisioned.
        - name: refresh
          type: boolean
          in: query
          description: Refresh any cached resource list on the server.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SqliteDbsResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
  /db/_schema: # PATH
    get: # VERB
      tags:
        - schema
      summary: getDbSchemas() - List all Schemas
      operationId: getDbSchemas
      description: Return a list of the resource identifiers.
      x-published:	# notyet
        - db._schema.list
      parameters:
        - name: as_list
          type: boolean
          in: query
          description: Return only a list of the resource identifiers.
        - name: fields
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Comma-delimited list of properties to be returned for each resource,
            "*" returns all properties. If as_list, use this to override the
            default identifier.
        - name: ids
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: Comma-delimited list of the identifiers of the records to retrieve.
        - name: refresh
          type: boolean
          in: query
          description: Refresh any cached resource list on the server.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SchemasResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    put: # VERB
      tags:
        - schema
      summary: replaceDbTables() - Update (replace) one or more tables.
      operationId: replaceDbTables
      x-published:	# notyet
        - db._schema.alter
      parameters:
        - name: tables
          description: Array of table definitions.
          schema:
            $ref: '#/definitions/TableSchemas'
          in: body
          required: true
      responses:
        '200':
          description: Tables Updated
          schema:
            $ref: '#/definitions/SchemasResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      description: >-
        Post data should be a single table definition or an array of table
        definitions.
    patch: # VERB
      tags:
        - schema
      summary: updateDbTables() - Update (patch) one or more tables.
      operationId: updateDbTables
      x-published:	# notyet
        - db._schema.alter
      parameters:
        - name: tables
          description: Array of table definitions.
          schema:
            $ref: '#/definitions/TableSchemas'
          in: body
          required: true
      responses:
        '200':
          description: Tables Updated
          schema:
            $ref: '#/definitions/SchemasResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      description: >-
        Post data should be a single table definition or an array of table
        definitions.
  '/db/_schema/{table_name}': # PATH
    parameters:
      - name: table_name
        description: Name of the table to perform operations on.
        type: string
        in: path
        required: true
    get: # VERB
      tags:
        - schema
      summary: describeDbTable() - Retrieve table definition for the given table.
      operationId: describeDbTable
      x-published:	# notyet
        - 'db._schema.{table_name}.describe'
        - db._schema.table_described
      parameters:
        - name: refresh
          description: Refresh any cached copy of the schema.
          type: boolean
          in: query
      responses:
        '200':
          description: Table Schema
          schema:
            $ref: '#/definitions/TableSchema'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      description: 'This describes the table, its fields and relations to other tables.'
    post: # VERB
      tags:
        - schema
      summary: createDbTable() - Create a table with the given properties and fields.
      operationId: createDbTable
      x-published:	# notyet
        - 'db._schema.{table_name}.create'
        - db._schema.table_created
      parameters:
        - name: schema
          description: Array of table properties and fields definitions.
          schema:
            $ref: '#/definitions/TableSchema'
          in: body
          required: true
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Success'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      description: >-
        Post data should be an array of field properties for a single record or
        an array of fields.
    put: # VERB
      tags:
        - schema
      summary: replaceDbTable() - Update (replace) a table with the given properties.
      operationId: replaceDbTable
      x-published:	# notyet
        - 'db._schema.{table_name}.alter'
        - db._schema.table_altered
      parameters:
        - name: schema
          description: Array of field definitions.
          schema:
            $ref: '#/definitions/TableSchema'
          in: body
          required: true
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Success'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      description: >-
        Post data should be an array of field properties for a single record or
        an array of fields.
    patch: # VERB
      tags:
        - schema
      summary: updateDbTable() - Update (patch) a table with the given properties.
      operationId: updateDbTable
      x-published:	# notyet
        - 'db._schema.{table_name}.alter'
        - db._schema.table_altered
      parameters:
        - name: schema
          description: Array of field definitions.
          schema:
            $ref: '#/definitions/TableSchema'
          in: body
          required: true
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Success'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      description: >-
        Post data should be an array of field properties for a single record or
        an array of fields.
    delete: # VERB
      tags:
        - schema
      summary: deleteDbTable() - Delete (aka drop) the given table.
      operationId: deleteDbTable
      x-published:	# notyet
        - 'db._schema.{table_name}.drop'
        - db._schema.table_dropped
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Success'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      description: 'Careful, this drops the database table and all of its contents.'
  '/db/_schema/{table_name}/{field_name}': # PATH
    parameters:
      - name: table_name
        description: Name of the table to perform operations on.
        type: string
        in: path
        required: true
      - name: field_name
        description: Name of the field to perform operations on.
        type: string
        in: path
        required: true
    get: # VERB
      tags:
        - schema
      summary: >-
        describeDbField() - Retrieve the definition of the given field for the
        given table.
      operationId: describeDbField
      x-published:	# notyet
        - 'db._schema.{table_name}.{field_name}.describe'
        - 'db._schema.{table_name}.field_described'
      parameters:
        - name: refresh
          description: Refresh any cached copy of the schema.
          type: boolean
          in: query
      responses:
        '200':
          description: Field Schema
          schema:
            $ref: '#/definitions/FieldSchema'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      description: This describes the field and its properties.
    put: # VERB
      tags:
        - schema
      summary: replaceDbField() - Update one record by identifier.
      operationId: replaceDbField
      x-published:	# notyet
        - 'db._schema.{table_name}.{field_name}.alter'
        - 'db._schema.{table_name}.field_altered'
      parameters:
        - name: properties
          description: Array of field properties.
          schema:
            $ref: '#/definitions/FieldSchema'
          in: body
          required: true
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Success'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      description: Post data should be an array of field properties for the given field.
    patch: # VERB
      tags:
        - schema
      summary: updateDbField() - Update one record by identifier.
      operationId: updateDbField
      x-published:	# notyet
        - 'db._schema.{table_name}.{field_name}.alter'
        - 'db._schema.{table_name}.field_altered'
      parameters:
        - name: properties
          description: Array of field properties.
          schema:
            $ref: '#/definitions/FieldSchema'
          in: body
          required: true
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Success'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      description: Post data should be an array of field properties for the given field.
    delete: # VERB
      tags:
        - schema
      summary: deleteDbField() - Remove the given field from the given table.
      operationId: deleteDbField
      x-published:	# notyet
        - 'db._schema.{table_name}.{field_name}.drop'
        - 'db._schema.{table_name}.field_dropped'
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Success'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      description: >-
        Careful, this drops the database table field/column and all of its
        contents.
  /db/_table: # PATH
    get: # VERB
      tags: [table, getDbTables, implemented]
      summary: getDbTables() - List all Tables
      operationId: getDbTables
      description: Return a list of the table names.
      x-published:	# notyet
        - db._table.list
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TablesResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
  '/db/_table/{table_name}': # PATH
    parameters:
      - name: table_name
        description: Name of the table to perform operations on.
        type: string
        in: path
        required: true
    get: # VERB
      tags: [table, get, record, getDbRecords, implemented]
      summary: getDbRecords() - Retrieve one or more records.
      operationId: getDbRecords
      description: >-
        Set the <b>filter</b> parameter to a SQL WHERE clause (optional native
        filter accepted in some scenarios) to limit records returned or leave it
        blank to return all records up to the maximum limit.<br/> Set the
        <b>limit</b> parameter with or without a filter to return a specific
        amount of records.<br/> Use the <b>offset</b> parameter along with the
        <b>limit</b> parameter to page through sets of records.<br/> Set the
        <b>order</b> parameter to SQL ORDER_BY clause containing field and
        optional direction (<field_name> [ASC|DESC]) to order the returned
        records.<br/> Alternatively, to send the <b>filter</b> with or without
        <b>params</b> as posted data, use the getRecordsByPost() POST request
        and post a filter with or without params.<br/>Pass the identifying field
        values as a comma-separated list in the <b>ids</b> parameter.<br/> Use
        the <b>id_field</b> and <b>id_type</b> parameters to override or specify
        detail for identifying fields where applicable.<br/> Alternatively, to
        send the <b>ids</b> as posted data, use the getRecordsByPost() POST
        request.<br/> Use the <b>fields</b> parameter to limit properties
        returned for each record. By default, all fields are returned for all
        records.
      x-published:	# notyet
        - 'db._table.{table_name}.select'
        - db._table.table_selected
      consumes:
        - application/json
        - application/xml	# notyet
      produces:
        - application/json
        - application/xml	# notyet
      parameters:
        - name: fields
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Comma-delimited list of properties to be returned for each resource,
            "*" returns all properties. If as_list, use this to override the
            default identifier.
        - name: limit
          type: integer
          in: query
          description: Set to limit the filter results.
        - name: offset
          type: integer
          format: int64
          in: query
          description: Set to offset the filter results to a particular record count.
        - name: ids
          type: array
          collectionFormat: csv
          items:
            type: integer
            format: int64
          in: query
          description: Comma-delimited list of the identifiers of the records to retrieve.
        - name: id_field
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            name of the field used as identifier.
      responses:
        '200':
          description: Records
          schema:
            $ref: '#/definitions/RecordsResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    post: # VERB
      tags: [table, post, record, createDbRecords, implemented]
      summary: createDbRecords() - Create one or more records.
      operationId: createDbRecords
      description: >-
        Posted data should be an array of records wrapped in a <b>record</b>
        element.<br/> By default, only the id property of the record is returned
        on success. Use <b>fields</b> parameter to return more info.
      x-published:	# notyet
        - 'db._table.{table_name}.insert'
        - db._table.table_inserted
      consumes:
        - application/json
        - application/xml	# notyet
      produces:
        - application/json
        - application/xml	# notyet
      parameters:
        - name: body
          description: Data containing name-value pairs of records to create.
          in: body
          schema:
            $ref: '#/definitions/BodyRecord'
          required: true
        - name: fields
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Comma-delimited list of properties to be returned for each resource,
            "*" returns all properties. If as_list, use this to override the
            default identifier.
        - name: id_field
          type: string
          in: query
          description: >-
            Name of the field used as identifier.
      responses:
        '201':
          description: IdsResponse
          schema:
            $ref: '#/definitions/IdsResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    patch: # VERB
      tags: [table, patch, record, updateDbRecords, implemented]
      summary: updateDbRecords() - Update (patch) one or more records.
      operationId: updateDbRecords
      description: >-
        Post data should be an array of records containing at least the
        identifying fields for each record.<br/> Posted body should be a single
        record with name-value pairs to update wrapped in a <b>record</b>
        tag.<br/> Ids can be included via URL parameter or included in the
        posted body.<br/> Filter can be included via URL parameter or included
        in the posted body.<br/> By default, only the id property of the record
        is returned on success. Use <b>fields</b> parameter to return more info.
      x-published:	# notyet
        - 'db._table.{table_name}.update'
        - db._table.table_updated
      consumes:
        - application/json
        - application/xml	# notyet
      produces:
        - application/json
        - application/xml	# notyet
      parameters:
        - name: body
          description: >-
            a single record, with the item Records being an array of objects.
            each object contains item Keys, a list of keys; and item Values,
            a list of values.
          schema:
            $ref: '#/definitions/BodyRecord'
          in: body
          required: true
        - name: fields
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Comma-delimited list of properties to be returned for each resource,
            "*" returns all properties. If as_list, use this to override the
            default identifier.
        - name: ids
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: Comma-delimited list of the identifiers of the records to retrieve.
        - name: id_field
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Name of field used as identifier.
      responses:
        '200':
          description: number of changed records
          schema:
            $ref: '#/definitions/NumChangedResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    delete: # VERB
      tags: [table, delete, record, deleteDbRecords, implemented]
      summary: deleteDbRecords() - Delete one or more records.
      operationId: deleteDbRecords
      description: >-
        Set the <b>ids</b> parameter to a list of record identifying (primary
        key) values to delete specific records.<br/> Alternatively, to delete
        records by a large list of ids, pass the ids in the <b>body</b>.<br/> By
        default, only the id property of the record is returned on success, use
        <b>fields</b> to return more info. Set the <b>filter</b> parameter to a
        SQL WHERE clause to delete specific records, otherwise set <b>force</b>
        to true to clear the table.<br/> Alternatively, to delete by a
        complicated filter or to use parameter replacement, pass the filter with
        or without params as the <b>body</b>.<br/> By default, only the id
        property of the record is returned on success, use <b>fields</b> to
        return more info. Set the <b>body</b> to an array of records, minimally
        including the identifying fields, to delete specific records.<br/> By
        default, only the id property of the record is returned on success, use
        <b>fields</b> to return more info.
      x-published:	# notyet
        - 'db._table.{table_name}.delete'
        - db._table.table_deleted
      consumes:
        - application/json
        - application/xml	# notyet
      produces:
        - application/json
        - application/xml	# notyet
      parameters:
        - name: fields
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Comma-delimited list of properties to be returned for each resource,
            "*" returns all properties. If as_list, use this to override the
            default identifier.
        - name: ids
          type: array
          collectionFormat: csv
          items:
            type: integer
            format: int64
          in: query
          description: Comma-delimited list of the identifiers of the records to delete.
        - name: id_field
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Name of the field used as identifier.
      responses:
        '200':
          description: Records
          schema:
            $ref: '#/definitions/NumChangedResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
  '/db/_table/{table_name}/{id}': # PATH
    parameters:
      - name: id
        description: Identifier of the record to retrieve.
        type: string
        in: path
        required: true
      - name: table_name
        description: Name of the table to perform operations on.
        type: string
        in: path
        required: true
    get: # VERB
      tags: [table, get, record, getDbRecord, implemented]
      summary: getDbRecord() - Retrieve one record by identifier.
      operationId: getDbRecord
      description: >-
        Use the <b>fields</b> parameter to limit properties that are returned.
        By default, all fields are returned.
      x-published:	# notyet
        - 'db._table.{table_name}.{id}.select'
        - db._table.record_selected
      consumes:
        - application/json
        - application/xml	# notyet
      produces:
        - application/json
        - application/xml	# notyet
      parameters:
        - name: fields
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Comma-delimited list of properties to be returned for each resource,
            "*" returns all properties. If as_list, use this to override the
            default identifier.
        - name: id_field
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Comma-delimited list of the fields used as identifiers, used to
            override defaults or provide identifiers when none are provisioned.
      responses:
        '200':
          description: Record
          schema:
            $ref: '#/definitions/RecordsResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    patch: # VERB
      tags: [table, patch, record, updateDbRecord, implemented]
      summary: updateDbRecord() - Update (patch) one record by identifier.
      operationId: updateDbRecord
      description: >-
        Post data should be an array of fields for a single record.<br/> Use the
        <b>fields</b> parameter to return more properties. By default, the id is
        returned.
      x-published:	# notyet
        - 'db._table.{table_name}.{id}.update'
        - db._table.record_updated
      consumes:
        - application/json
        - application/xml	# notyet
      produces:
        - application/json
        - application/xml	# notyet
      parameters:
        - name: body
          description: Data containing name-value pairs of the fields to update.
          schema:
            $ref: '#/definitions/KVRecord'
          in: body
          required: true
        - name: id_field
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Name of the id field to use.
      responses:
        '200':
          description: Record
          schema:
            $ref: '#/definitions/NumChangedResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    delete: # VERB
      tags: [table, delete, record, deleteDbRecord, implemented]
      summary: deleteDbRecord() - Delete one record by identifier.
      operationId: deleteDbRecord
      description: >-
        Use the <b>fields</b> parameter to return more deleted properties. By
        default, the id is returned.
      x-published:	# notyet
        - 'db._table.{table_name}.{id}.delete'
        - db._table.record_deleted
      consumes:
        - application/json
        - application/xml	# notyet
      produces:
        - application/json
        - application/xml	# notyet
      parameters:
        - name: fields
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Comma-delimited list of properties to be returned for each resource,
            "*" returns all properties. If as_list, use this to override the
            default identifier.
        - name: id_field
          type: array
          collectionFormat: csv
          items:
            type: string
          in: query
          description: >-
            Name of the field used as identifier.
      responses:
        '200':
          description: Record
          schema:
            $ref: '#/definitions/NumChangedResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Success:
    type: object
    properties:
      success:
        type: boolean
        description: 'True when API call was successful, false or error otherwise.'
  Error:
    type: object
    properties:
      Code:
        type: integer
        format: int64
        description: Error code.
      Message:
        type: string
        description: String description of the error.
  SqliteDbResponse:
    type: object
    properties:
      name:
        type: string
        description: Identifier of the resource.
  SqliteDbsResponse:
    type: object
    properties:
      resource:
        type: array
        description: Array of resources available to this service.
        items:
          $ref: '#/definitions/SqliteDbResponse'
  SchemaResponse:
    type: object
    properties:
      name:
        type: string
        description: Identifier of the resource.
  SchemasResponse:
    type: object
    properties:
      resource:
        type: array
        description: Array of resources available to this path.
        items:
          $ref: '#/definitions/SchemaResponse'
  TableSchemas:
    type: object
    properties:
      resource:
        type: array
        description: An array of table definitions.
        items:
          $ref: '#/definitions/TableSchema'
  TableSchema:
    type: object
    properties:
      name:
        type: string
        description: Identifier/Name for the table.
      label:
        type: string
        description: Displayable singular name for the table.
      plural:
        type: string
        description: Displayable plural name for the table.
      primary_key:
        type: string
        description: 'Field(s), if any, that represent the primary key of each record.'
      name_field:
        type: string
        description: 'Field(s), if any, that represent the name of each record.'
      field:
        type: array
        description: An array of available fields in each record.
        items:
          $ref: '#/definitions/FieldSchema'
      related:
        type: array
        description: An array of available relationships to other tables.
        items:
          $ref: '#/definitions/RelatedSchema'
  FieldSchema:
    type: object
    properties:
      name:
        type: string
        description: The API name of the field.
      label:
        type: string
        description: The displayable label for the field.
      type:
        type: string
        description: The DSP abstract data type for this field.
      db_type:
        type: string
        description: The native database type used for this field.
      length:
        type: integer
        format: int64
        description: >-
          The maximum length allowed (in characters for string, displayed for
          numbers).
      precision:
        type: integer
        format: int64
        description: Total number of places for numbers.
      scale:
        type: integer
        format: int64
        description: Number of decimal places allowed for numbers.
      default_value:
        type: string
        description: Default value for this field.
      required:
        type: boolean
        description: Is a value required for record creation.
      allow_null:
        type: boolean
        description: Is null allowed as a value.
      fixed_length:
        type: boolean
        description: Is the length fixed (not variable).
      supports_multibyte:
        type: boolean
        description: Does the data type support multibyte characters.
      auto_increment:
        type: boolean
        description: Does the integer field value increment upon new record creation.
      is_primary_key:
        type: boolean
        description: Is this field used as/part of the primary key.
      is_foreign_key:
        type: boolean
        description: Is this field used as a foreign key.
      ref_table:
        type: string
        description: 'For foreign keys, the referenced table name.'
      ref_fields:
        type: string
        description: 'For foreign keys, the referenced table field name.'
      validation:
        type: array
        description: validations to be performed on this field.
        items:
          type: string
      value:
        type: array
        description: Selectable string values for client menus and picklist validation.
        items:
          type: string
  RelatedSchema:
    type: object
    properties:
      name:
        type: string
        description: Name of the relationship.
      type:
        type: string
        description: 'Relationship type - belongs_to, has_many, many_many.'
      field:
        type: string
        description: The current table field that is used in the relationship.
      ref_table:
        type: string
        description: The table name that is referenced by the relationship.
      ref_fields:
        type: string
        description: The field name that is referenced by the relationship.
      junction_table:
        type: string
        description: The intermediate junction table used for many_many relationships.
      junction_field:
        type: string
        description: >-
          The intermediate junction table field used for many_many
          relationships.
      junction_ref_field:
        type: string
        description: >-
          The intermediate joining table referencing field used for many_many
          relationships.
  TablesResponse:
    type: object
    properties:
      resource:
        type: array
        description: Array of resources available to this path.
        items:
          type: string
  KVRecord:
    type: object
    properties:
      keys:
        type: array
        items:
          type: string
      values:
        type: array
        items:
          type: string
  BodyRecord:
    type: object
    properties:
      Records:
        type: array
        description: Array of keynames.
        items:
          $ref: '#/definitions/KVRecord'
  NumChangedResponse:
    type: object
    properties:
      NumChanged:
        type: integer
        format: int64
  IdsResponse:
    type: object
    properties:
      ids:
        type: array
        description: array of ids
        items:
          type: integer
          format: int64
  RecordsResponse:
    type: object
    properties:
      resource:
        type: array
        description: Array of system user records.
        items:
          type: object
